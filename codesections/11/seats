#!/bin/env raku
enum Seat(empty => :2<10>, occupied => 1, floor => 0);
sub MAIN(Bool :$p2=?0, Bool :$p1=!$p2, Bool :$v) {
    my @seats = lines».comb.».Array.deepmap({ when 'L' { empty    }
                                              when '#' { occupied }
                                              when '.' { floor    }});
    when $p1 { say +gather { loop { run-step(@seats); }}.tail.indices('#') }
}

sub count-adjacent-seats(@seats) {
    $_ = @seats.deepmap(* +& 0b01);
    [Z«+»] (.&shift(:left), .&shift(:right), .&shift(:up), .&shift(:down), .&shift(:up, :left),
            .&shift(:up, :right), .&shift(:down, :left), .&shift(:down, :right));
}

sub shift($_, :left(:$l)=0, :right(:$r)=0, :$up=0, :down(:$d)=0) {
    sub term:<⌀> is pure { 0 xx .head.elems }
    [ (⌀ if $d), |.map({[(0 if $r), |@^row[0+$l..^*-$r], (0 if $l)]})[0+$up..^*-$d], (⌀ if $up) ]
}

sub run-step(@seats) {
    my @adjacent-seats = @seats.&count-adjacent-seats;
    my @new-seats = (@seats Z«,» @adjacent-seats).duckmap(-> ($_, $adj) {
                        when floor       { floor }
                        when occupied    { $adj ≥  4 ?? empty    !! occupied }
                        when empty       { $adj == 0 ?? occupied !! empty    }});
    take render @new-seats;
    @new-seats !eqv @seats ?? (@seats = @new-seats) !! last; 
}


DOC CHECK {
use Test;
my $in = q:to/§/;
    L.LL.LL.LL
    LLLLLLL.LL
    L.L.L..L..
    LLLL.LL.LL
    L.LL.LL.LL
    L.LLLLL.LL
    ..L.L.....
    LLLLLLLLLL
    L.LLLLLL.L
    L.LLLLL.LL
    §

    #my uint @floor = (@occupied-seat-rows Z«+|» @empty-seat-rows);

    # say my %dimensions = $in.lines.&{length => .elems, width => .[0].chars};
    # say my $empty-seats    = :2($in.lines.join.trans(<. # L> => <0 0 1>));
    # say my $occupied-seats = :2($in.lines.join.trans(<. # L> => <0 1 0>));
    # say $empty-seats.&render-mask(%dimensions);
    # say $occupied-seats.&render-mask(%dimensions);
    # say (+^($occupied-seats +| $empty-seats)).&render-mask(%dimensions);
    # sub render-mask($bin is copy, % (:$length, :$width)) {
    #     gather { for ^$length {
    #        take '%0*b'.sprintf($width, $bin +& (2 ** $width - 1));
    #        $bin = $bin +> $width
    #     }}.reverse.join("\n")
    # }


    my @in = $in.lines».comb.».Array;
    my @seats = @in.deepmap({ when 'L' { empty  }
                              when '#' { occupied  }
                              when '.' { floor }});
    my $row-len = $in.lines.head.chars;
    my uint @occupied-seat-rows = $in.lines».trans(<. # L> => <0 1 0>).map({:2($_)});
    my uint @empty-seat-rows    = $in.lines».trans(<. # L> => <0 0 1>).map({:2($_)});

    my @steps = gather { for ^6 { run-step(@seats); }};
    @steps[0].&is(q:to/§/, "After 1 round");
    #.##.##.##
    #######.##
    #.#.#..#..
    ####.##.##
    #.##.##.##
    #.#####.##
    ..#.#.....
    ##########
    #.######.#
    #.#####.##
    §

    @steps[1].&is(q:to/§/);
    #.LL.L#.##
    #LLLLLL.L#
    L.L.L..L..
    #LLL.LL.L#
    #.LL.LL.LL
    #.LLLL#.##
    ..L.L.....
    #LLLLLLLL#
    #.LLLLLL.L
    #.#LLLL.##
    §

    @steps[2].&is(q:to/§/);
    #.##.L#.##
    #L###LL.L#
    L.#.#..#..
    #L##.##.L#
    #.##.LL.LL
    #.###L#.##
    ..#.#.....
    #L######L#
    #.LL###L.L
    #.#L###.##
    §
    
    @steps[3].&is(q:to/§/);
    #.#L.L#.##
    #LLL#LL.L#
    L.L.L..#..
    #LLL.##.L#
    #.LL.LL.LL
    #.LL#L#.##
    ..L.L.....
    #L#LLLL#L#
    #.LLLLLL.L
    #.#L#L#.##
    §

    @steps[4].&is(q:to/§/); 
    #.#L.L#.##
    #LLL#LL.L#
    L.#.L..#..
    #L##.##.L#
    #.#L.LL.LL
    #.#L#L#.##
    ..L.L.....
    #L#L##L#L#
    #.LLLLLL.L
    #.#L#L#.##
    §
    
    @steps[5].&is(q:to/§/);
    #.#L.L#.##
    #LLL#LL.L#
    L.#.L..#..
    #L##.##.L#
    #.#L.LL.LL
    #.#L#L#.##
    ..L.L.....
    #L#L##L#L#
    #.LLLLLL.L
    #.#L#L#.##
    §

    @steps.tail.indices('#').elems.&is(37, 'part 1');
}

sub show(@a) { say ( '[ [' ~ @a.join("]\n  [") ~ '] ]')}
sub render(@a) { @a.deepmap({ when 0  { '.' }
                              when 1  { '#' }
                              when 0b10 { 'L' }})».join.join("\n") ~ "\n"}

