#!/bin/env raku

#| Determine what adapters work
sub MAIN(Bool :$p2=?0, Bool :$p1=!$p2) {
    my @in = lines».Int.sort;
    when $p1 { (|@in, @in.max+3) «-» (0, |@in)
               ==> {+.grep(1) × +.grep(3)}()
               ==> say() }
    when $p2 { find-runs-of-consecutive-nums((|@in, @in.max+3) «-» (0, |@in)) 
               ==> {[×] .map({tribonacci($_)})}()
               ==> say() }
}
#| Calcultate the Tribonacci sequence (like the Fibonacci, but for the last 3 numbers instead of 2)
sub tribonacci($n) { (1, 1, 2, * + * + * … ∞)[$n] }

#| Count the length of runs of consecutive ints (e.g. 4, 5, 6 is a run of len 3)
sub find-runs-of-consecutive-nums(@num-Δs) {
    my $run-len = 0;
    gather { for @num-Δs { when 1 { $run-len++; }
                           when 2 { die "Gaps of two are not supported" }
                           when 3 { take $run-len;
                                    $run-len = 0; }}}
}

# Tests (run with `raku --doc -c $NAME`)
DOC CHECK { use Test;
  my @in = q:to/§/.lines».Int.sort;
    28
    33
    18
    42
    31
    14
    46
    20
    48
    47
    24
    23
    49
    45
    19
    38
    39
    11
    1
    32
    25
    35
    8
    17
    7
    9
    4
    2
    34
    10
    3
    §

    @in «-» (0, |@in) ==> {+.grep(1), (+.grep(3) + 1)}()
                      ==> {$^result.&is((22, 10), 'part 1')}();
  find-runs-of-consecutive-nums((|@in, @in.max+3) «-» (0, |@in)) 
               ==> {[×] .map({tribonacci($_)})}()
               ==> {$^result.&is(19208, 'part 2')}()
}

